input  logic        clk,
input  logic        rst_n,
input  logic        test_en_i,
input  logic        fregfile_disable_i,

input  logic        fetch_enable_i,
output logic        ctrl_busy_o,
output logic        core_ctrl_firstfetch_o,
output logic        is_decoding_o,

// Interface to IF stage
input  logic [N_HWLP-1:0] hwlp_dec_cnt_i,
input  logic              is_hwlp_i,
input  logic              instr_valid_i,
input  logic       [31:0] instr_rdata_i,      // comes from pipeline of IF stage
output logic              instr_req_o,


// Jumps and branches
output logic        branch_in_ex_o,
input  logic        branch_decision_i,
output logic [31:0] jump_target_o,

// IF and ID stage signals
output logic        clear_instr_valid_o,
output logic        pc_set_o,
output logic [2:0]  pc_mux_o,
output logic [2:0]  exc_pc_mux_o,
output logic        trap_addr_mux_o,

input  logic        illegal_c_insn_i,
input  logic        is_compressed_i,
input  logic        is_fetch_failed_i,

input  logic [31:0] pc_if_i,
input  logic [31:0] pc_id_i,

// Stalls
output logic        halt_if_o,      // controller requests a halt of the IF stage

output logic        id_ready_o,     // ID stage is ready for the next instruction
input  logic        ex_ready_i,     // EX stage is ready for the next instruction
input  logic        wb_ready_i,     // WB stage is ready for the next instruction

output logic        id_valid_o,     // ID stage is done
input  logic        ex_valid_i,     // EX stage is done

// Pipeline ID/EX
output logic [31:0] pc_ex_o,

output logic [31:0] alu_operand_a_ex_o,
output logic [31:0] alu_operand_b_ex_o,
output logic [31:0] alu_operand_c_ex_o,
output logic [ 4:0] bmask_a_ex_o,
output logic [ 4:0] bmask_b_ex_o,
output logic [ 1:0] imm_vec_ext_ex_o,
output logic [ 1:0] alu_vec_mode_ex_o,

output logic [5:0]  regfile_waddr_ex_o,
output logic        regfile_we_ex_o,

output logic [5:0]  regfile_alu_waddr_ex_o,
output logic        regfile_alu_we_ex_o,

// ALU
output logic        alu_en_ex_o,
output logic [ALU_OP_WIDTH-1:0] alu_operator_ex_o,
output logic        alu_is_clpx_ex_o,
output logic        alu_is_subrot_ex_o,
output logic [ 1:0] alu_clpx_shift_ex_o,


// MUL
output logic [ 2:0] mult_operator_ex_o,
output logic [31:0] mult_operand_a_ex_o,
output logic [31:0] mult_operand_b_ex_o,
output logic [31:0] mult_operand_c_ex_o,
output logic        mult_en_ex_o,
output logic        mult_sel_subword_ex_o,
output logic [ 1:0] mult_signed_mode_ex_o,
output logic [ 4:0] mult_imm_ex_o,

output logic [31:0] mult_dot_op_a_ex_o,
output logic [31:0] mult_dot_op_b_ex_o,
output logic [31:0] mult_dot_op_c_ex_o,
output logic [ 1:0] mult_dot_signed_ex_o,
output logic        mult_is_clpx_ex_o,
output logic [ 1:0] mult_clpx_shift_ex_o,
output logic        mult_clpx_img_ex_o,

// APU
output logic                        apu_en_ex_o,
output logic [WAPUTYPE-1:0]         apu_type_ex_o,
output logic [APU_WOP_CPU-1:0]      apu_op_ex_o,
output logic [1:0]                  apu_lat_ex_o,
output logic [APU_NARGS_CPU-1:0][31:0]                 apu_operands_ex_o,
output logic [APU_NDSFLAGS_CPU-1:0] apu_flags_ex_o,
output logic [5:0]                  apu_waddr_ex_o,

output logic [2:0][5:0]            apu_read_regs_o,
output logic [2:0]                 apu_read_regs_valid_o,
input  logic                       apu_read_dep_i,
output logic [1:0][5:0]            apu_write_regs_o,
output logic [1:0]                 apu_write_regs_valid_o,
input  logic                       apu_write_dep_i,
output logic                       apu_perf_dep_o,
input  logic                       apu_busy_i,
input  logic [C_RM-1:0]            frm_i,

// CSR ID/EX
output logic        csr_access_ex_o,
output logic [1:0]  csr_op_ex_o,
input  PrivLvl_t    current_priv_lvl_i,
output logic        csr_irq_sec_o,
output logic [5:0]  csr_cause_o,
output logic        csr_save_if_o,
output logic        csr_save_id_o,
output logic        csr_save_ex_o,
output logic        csr_restore_mret_id_o,
output logic        csr_restore_uret_id_o,

output logic        csr_restore_dret_id_o,

output logic        csr_save_cause_o,

// hwloop signals
output logic [N_HWLP-1:0] [31:0] hwlp_start_o,
output logic [N_HWLP-1:0] [31:0] hwlp_end_o,
output logic [N_HWLP-1:0] [31:0] hwlp_cnt_o,

// hwloop signals from CS register
input  logic   [N_HWLP_BITS-1:0] csr_hwlp_regid_i,
input  logic               [2:0] csr_hwlp_we_i,
input  logic              [31:0] csr_hwlp_data_i,

// Interface to load store unit
output logic        data_req_ex_o,
output logic        data_we_ex_o,
output logic [1:0]  data_type_ex_o,
output logic [1:0]  data_sign_ext_ex_o,
output logic [1:0]  data_reg_offset_ex_o,
output logic        data_load_event_ex_o,

output logic        data_misaligned_ex_o,

output logic        prepost_useincr_ex_o,
input  logic        data_misaligned_i,
input  logic        data_err_i,
output logic        data_err_ack_o,
// Interrupt signals
input  logic        irq_i,
input  logic        irq_sec_i,
input  logic [4:0]  irq_id_i,
input  logic        m_irq_enable_i,
input  logic        u_irq_enable_i,
output logic        irq_ack_o,
output logic [4:0]  irq_id_o,
output logic [5:0]  exc_cause_o,

// Debug Signal
output logic        debug_mode_o,
output logic [2:0]  debug_cause_o,
output logic        debug_csr_save_o,
input  logic        debug_req_i,
input  logic        debug_single_step_i,
input  logic        debug_ebreakm_i,
input  logic        debug_ebreaku_i,

// Forward Signals
input  logic [5:0]  regfile_waddr_wb_i,
input  logic        regfile_we_wb_i,
input  logic [31:0] regfile_wdata_wb_i, // From wb_stage: selects data from data memory, ex_stage result and sp rdata

input  logic [5:0]  regfile_alu_waddr_fw_i,
input  logic        regfile_alu_we_fw_i,
input  logic [31:0] regfile_alu_wdata_fw_i,

// from ALU
input  logic        mult_multicycle_i,    // when we need multiple cycles in the multiplier and use op c as storage

// Performance Counters
output logic        perf_jump_o,          // we are executing a jump instruction
output logic        perf_jr_stall_o,      // jump-register-hazard
output logic        perf_ld_stall_o,      // load-use-hazard
output logic        perf_pipeline_stall_o //extra cycles from elw
